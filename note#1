# 3주차

역전파 - 미분을 효율적으로 계산할 수 있고 결과값의 오차도 적음 

손실함수 값을 손실한만큼 업데이트를 시켜야한다. 

노드를 학습시켜 업데이트를 해야한다.

가중치의 최적값을 만들어 내야한다. 

변수를 가중치라고 한다. (함수)

출력층에서 입력층 방향으로 오차를 전파시키며 각 층의 가중치를 업데이트한다.(강의자료에 없음)

역전파 코드를 직접 작성하는 것이 아닌 자동화 

변수 안에 파라미터를 넣고 이것은 창조자나 부모다

계산 그래프 역추적에서 input과 output, creator부분이 이해가 잘 되지 않는다. 

역추적(Reverse-mode differentiation)에서 입력과 생성자(creator) 간의 관계는 계산 그래프의 구조를 설명하는 데 중요합니다. 계산 그래프는 수학적인 연산들이 서로 연결된 그래프입니다. 이 그래프에서 노드(node)는 연산을 나타내고, 엣지(edge)는 연산 사이의 데이터 흐름을 나타냅니다.

1. **입력(Input)**:
    - 입력은 주어진 문제의 초기 데이터를 나타냅니다. 예를 들어, 이미지를 분류하는 경우에는 이미지 데이터가 입력이 될 수 있습니다.
    - 입력은 그래프의 시작 지점에 해당하며, 일반적으로는 사용자가 직접 제공하는 값입니다.
2. **생성자(Creator)**:
    - 생성자는 연산 그래프에서 특정 연산을 수행하는 노드를 가리킵니다.
    - 생성자는 입력 데이터나 다른 연산의 결과로부터 파생됩니다.
    - 각 생성자는 입력과 파라미터를 사용하여 출력을 생성합니다.
    - 예를 들어, 덧셈 연산의 경우 두 입력을 받고 그들을 더한 값을 출력으로 생성합니다.

역추적에서는 역전파를 통해 각 생성자로부터 입력까지 그래디언트를 역으로 전파합니다. 이를 통해 손실 함수에 대한 각 입력의 미분 값을 계산할 수 있습니다. 그래프의 역방향으로 이동하면서 각 생성자는 자신의 입력에 대한 미분 값을 계산하고 전파합니다. 이 과정은 연쇄 법칙(chain rule)을 사용하여 수행됩니다.

간단한 예를 들어보겠습니다. 다음과 같은 수식이 있다고 가정해 봅시다:

\[ f(x, y) = x^2 + y \]

여기서 \( f \)는 \( x \)와 \( y \)에 대한 함수이며, 덧셈과 제곱이라는 두 개의 생성자를 가지고 있습니다. \( f \)를 미분하면 \( x \)와 \( y \)에 대한 편미분 값이 얻어집니다. 이 과정은 역전파를 통해 진행됩니다.

계산 그래프의 이러한 구조를 통해 역추적은 각 입력과 생성자 간의 관계를 파악하여 효율적으로 그래디언트를 계산할 수 있습니다.

동적으로 계산이 된다.
