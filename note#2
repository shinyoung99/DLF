# 4주차
# 5주차

202184032 안신영

가변적인 변수를 테스트 

exp을 5로 설정하였더니 Fail이 나왔고, 6을 입력을 해야한다.

y = 순전파, 역전파를 집어넣는다.

num.grad → assertTrue로 비교한다. 

discover라는 하위 명령 사용해서 디렉토리에서 발견한 모든 테스트 파일을 실행할 수 있다. 

테스트파일에 넣을 수 있는 것이 한정적

미분을 통해서 자동저장을 하고 자동미분을 한다.

Variable → 함수 입장에서는 input, output

정확히 set_creator의 개념을 제대로 모르겠다.

부모를 알려주는 것인가?

forward 메서드에서 구체적인 계산 수행을 한다. → Variable에 계산 결과를 넣고 아버지? set_creator?

순전파에서 가변 길이 입출력 처리는 사용시 복잡하다.

```
xs = [Variable(np.array(2)), Variable(np.array(3))]
f = Add()
ys = f(xs)
y = ys[0]
print(y.data)
```

```
NameError Traceback (most recent call last)

```

```
<ipython-input-15-372481d8c0bc> in <cell line: 1>()
----> 1 xs = [Variable(np.array(2)), Variable(np.array(3))]
      2 f = Add()
      3 ys = f(xs)
      4 y = ys[0]
      5 print(y.data)

```

```
NameError: name 'Variable' is not defined
```

여기에서 에러가 발생한다. 

z = x^2 + y^2 → Add 함수와 square 함수를 사용해야한다. 

같은 변수 반복하여(x,x) 사용시 전파되는 미분값이 덮어 써진다. → 이랬을 경우 처음 이후부터는 전달된 미분 값을 더해주도록 수정해준다.

미분값을 초기화 해주는 cleargrad 메서드

--------------------------------------------

참조 카운터 방식으로 메모리 관리 -> 객체에 대한 참조가 끊길 떄마다 1만큼 감소하다가 0이 되면 회수 
순환 참조 -> 참조 카운터로 해결할 수 없을 때 사용한다. 왜냐면 메모리에서 삭제가 되지 않기 때문에 
약한 참조 -> 다른 객체를 참조하되 참조 카운터는 증가시키지 안흔 기능 
참조 카운터의 경우 다른 객체가 생성되면 1로 카운터가 증가하는데 약한 참조는 다른 객체를 참조하는데도 불구하는데 카운터를 증가시키지 않는 원리가 궁금하다.
Weakref 구조를 DeZero에 도입 -> 약한 참조로 가르키게 변경한다. import문을 써줘야한다.

DeZero 순환 참조 문제 해소를 할 떄 사용자는 이전의 계산 그래프를 참조하지 않게 되는데 그게 for문이 두번 덮어써져서 그런건지 아니면 메모리가 삭제되는 경우에 그런건지 의문이 듭니다. 

with문을 사용할 때 전처리 먼저하고 후처리를 자동으로 수행
with  a (): -> 블록을 벗어나면 일반모드
with뭄을 사용하면 모드 전환이 편하기 때문에 사용한다. 
import contextlib -> with문 활용


변수 이름 지정 -> 변수들을 서로 구분하기 위하여
name = None 
self.name = name

ndarray 인스턴스 변수 -> 확장
@property는 shape 메서드를 인스턴스 변수처럼 사용할 수 있게 함.

as_array를 사용하면 ndarray 인스턴스로 변환

Variable 인스턴스의 속성에 _array_priority_ 추가하고 그 값을 큰 정수로 설정을 할 수 있다. ndarray 인스턴스의 연사자 우선순위보다 높일 수 있다.

